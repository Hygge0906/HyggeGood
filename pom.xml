<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 父 POM (Spring Boot) 配置 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.3</version><!-- Spring Boot 的版本 -->
        <relativePath/> <!-- 从仓库查找父 POM -->
    </parent>

    <!-- 项目的基本信息 -->
    <groupId>com.hyggegood</groupId> <!-- 项目的组织 ID -->
    <artifactId>HyggeGood</artifactId> <!-- 项目的 artifactId -->
    <version>0.0.1-SNAPSHOT</version> <!-- 项目的版本 -->
    <name>HyggeGood</name> <!-- 项目的名称 -->
    <description>HyggeGood</description> <!-- 项目的描述 -->
    <packaging>pom</packaging> <!-- 项目的打包方式，这里使用的是 POM 类型，表示该项目是一个聚合 POM 项目 -->

    <!-- 模块化配置，定义了子模块 -->
    <modules>
        <module>hg_admin</module> <!--子模块 admin -->
        <module>hg_config</module><!--子模块 config -->
    </modules>

    <!-- 项目的版本号配置 -->
    <properties>
        <java.version>17</java.version> <!-- 指定使用的 Java 版本 -->
        <spring-boot.version>3.2.3</spring-boot.version> <!-- Spring Boot 的版本 -->
        <spring-cloud.version>2023.0.0</spring-cloud.version> <!-- Spring Cloud 的版本 -->
        <spring-cloud-alibaba.version>2023.0.0.0-RC1</spring-cloud-alibaba.version> <!-- Spring Cloud Alibaba 的版本 -->
        <lombok.version>1.18.30</lombok.version> <!-- Lombok 的版本 -->
        <mybatis-plus.version>3.5.5</mybatis-plus.version> <!-- MyBatis-Plus 的版本 -->
        <mysql.version>8.0.19</mysql.version> <!-- MySQL 驱动的版本 -->
        <http.components.version>4.4.13</http.components.version> <!-- Apache HttpComponents 的版本 -->
        <commons.lang.version>2.6</commons.lang.version> <!-- Commons Lang 库的版本 -->
        <velocity.version>2.0</velocity.version> <!-- Apache Velocity 的版本 -->
    </properties>

    <!-- 项目所需的依赖 -->
    <dependencies>
        <!-- Spring Boot Web Starter，提供了用于构建 Web 应用的基础功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot 测试相关的依赖，包含测试框架 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope> <!-- 这个依赖只在测试时使用 -->
        </dependency>

        <!-- MyBatis-Plus 依赖，MyBatis 的增强工具包 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>${mybatis-plus.version}</version> 
        </dependency>

        <!-- MySQL 数据库连接器 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <!-- Apache HttpComponents 中的 httpcore 库 -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>${http.components.version}</version> 
        </dependency>

        <!-- Commons Lang 库，提供一些 Java 标准库中没有的工具类 -->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons.lang.version}</version> 
        </dependency>

        <!-- Lombok，Java 编译时自动生成代码的工具，减少样板代码 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version> 
            <scope>provided</scope> <!-- Lombok 只在编译时需要，运行时不需要 -->
        </dependency>

        <!-- Spring Cloud Alibaba 依赖，用于集成 Spring Cloud 和 Alibaba 的相关功能 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-alibaba-dependencies</artifactId>
            <version>${spring-cloud-alibaba.version}</version> 
            <type>pom</type> <!-- 表示该依赖是一个 POM 类型的依赖，用来导入一组依赖 -->
            <scope>import</scope> <!-- 作为导入的 POM，进行依赖管理 -->
        </dependency>

        <!-- Apache Velocity 引擎的核心依赖 -->
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-engine-core</artifactId>
            <version>${velocity.version}</version> 
        </dependency>
    </dependencies>

    <!-- 依赖管理部分，统一管理各个依赖的版本 -->
    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot 依赖管理，导入 Spring Boot 依赖的版本管理 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version> 
                <type>pom</type> <!-- 类型为 POM -->
                <scope>import</scope> <!-- 导入该 POM 的版本管理 -->
            </dependency>

            <!-- Spring Cloud 依赖管理，导入 Spring Cloud 依赖的版本管理 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version> 
                <type>pom</type> <!-- 类型为 POM -->
                <scope>import</scope> <!-- 导入该 POM 的版本管理 -->
            </dependency>

            <!-- Spring Cloud Alibaba 依赖管理，导入 Spring Cloud Alibaba 依赖的版本管理 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version> 
                <type>pom</type> <!-- 类型为 POM -->
                <scope>import</scope> <!-- 导入该 POM 的版本管理 -->
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>
